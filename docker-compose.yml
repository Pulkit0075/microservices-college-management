version: '3.8'

services:
  # Development Databases
  postgres-student:
    image: postgres:15-alpine
    container_name: postgres-student
    environment:
      POSTGRES_DB: student_db
      POSTGRES_USER: student_user
      POSTGRES_PASSWORD: student_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_student_data:/var/lib/postgresql/data
      - ./docker-config/postgres/init-student.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U student_user -d student_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  postgres-faculty:
    image: postgres:15-alpine
    container_name: postgres-faculty
    environment:
      POSTGRES_DB: faculty_db
      POSTGRES_USER: faculty_user
      POSTGRES_PASSWORD: faculty_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_faculty_data:/var/lib/postgresql/data
      - ./docker-config/postgres/init-faculty.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U faculty_user -d faculty_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Elasticsearch for Search Service
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kibana for Elasticsearch visualization (Optional)
  kibana:
    image: kibana:8.9.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=
    ports:
      - "5601:5601"
    networks:
      - microservices-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for Caching (Optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Database Management Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker-config/pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - "5050:80"
    networks:
      - microservices-network
    depends_on:
      - postgres-student
      - postgres-faculty
    restart: unless-stopped

  # NGINX (will be configured later when services are ready)
  nginx:
    image: nginx:alpine
    container_name: nginx-gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - microservices-network
    restart: unless-stopped
    # Commenting out depends_on until services are created
    # depends_on:
    #   - student-service
    #   - faculty-service
    #   - search-service

  # Development Tools Container
  dev-tools:
    image: openjdk:17-jdk-slim
    container_name: dev-tools
    volumes:
      - .:/workspace
      - maven_cache:/root/.m2
    working_dir: /workspace
    networks:
      - microservices-network
    command: sleep infinity
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./docker-config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - microservices-network
    restart: unless-stopped

  # Grafana for Monitoring Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker-config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker-config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_student_data:
    driver: local
  postgres_faculty_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  maven_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16